package ${basePackage}${currentPackage};

import ${basePackage}.common.enums.Error;
import lombok.SneakyThrows;
import org.apache.shiro.authz.UnauthorizedException;
import org.springframework.boot.autoconfigure.web.ErrorProperties;
import org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController;
import org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver;
import org.springframework.boot.web.servlet.error.ErrorAttributes;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;

/**
 * <p>
 *
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
public class OtherExceptionHandler extends BasicErrorController
{
    private final ErrorProperties errorProperties;

    public OtherExceptionHandler(ErrorAttributes errorAttributes, ErrorProperties errorProperties, List<ErrorViewResolver> errorViewResolvers)
    {
        super(errorAttributes, errorProperties, errorViewResolvers);
        this.errorProperties = errorProperties;
    }

    /**
     * ajax响应的
     *
     * @param request
     * @return
     */
    @SneakyThrows
    @Override
    public ResponseEntity<Map<String, Object>> error(HttpServletRequest request)
    {
        Map<String, Object> body = getErrorAttributes(request,
                isIncludeStackTrace(request, MediaType.ALL));

        HttpStatus status = getStatus(request);
        int value = status.value();
        String errMsg = status.getReasonPhrase();

        if (status == HttpStatus.UNAUTHORIZED || status == HttpStatus.FORBIDDEN)
        {
            throw new UnauthorizedException(errMsg);
        }
        else if (status == HttpStatus.NOT_FOUND)
        {
            throw new ServiceException(Error.请求路径异常.getCode(), "请求路径异常");
        }
        else
        {
            throw new ServiceException(value, errMsg);
        }
    }

    /**
     * html响应的
     *
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(produces = "text/html")
    @Override
    public ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response)
    {
        return super.errorHtml(request, response);
    }


    @Override
    public String getErrorPath()
    {
        return errorProperties.getPath();
    }
}
